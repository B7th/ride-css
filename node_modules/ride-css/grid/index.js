// Ride css. Released under MIT licence.
// https://github.com/OctoD/ride-css/
var calcColumn
  , calcFloat
  , getColumns
  , getFloats
  , subtGutter
  , grid;

// grid constructor
grid = module.exports = function GridWidth (width, columns, gutter, padding) {
  this.columns = columns;
  this.gutter = gutter;
  this.padding = padding;
  this.minColumn = (Math.round(width/columns)*10000) / 10000;
  this.subtractArray = [[0, 0], [1, 1], [1, 1], [1, 3]]
  this.width = width;
}

// calculates the column
calcColumn = function (column) {
  return this.minColumn * column;
}

// calculates the float
calcFloat = function (column) {
  var _width = this.calcColumn(column)
    , _gutter = this.calcGutter(this.gutter)
    , _padding = this.calcPadding(this.padding);

  return _width + (_gutter /2 );
}

// calculates a list of columns
getColumns = function (columns) {
  var cols = []
    , index = 0
    , self = this;

  while (index < self.columns.length) {
    cols.push(self.calcColumn(self.columns[index]));
    index++;
  }
  return cols;
}

// calculates a list of columns
getFloats = function () {
  var floats = []
    , index = 0
    , self = this;

  while (index < self.columns.length) {
    floats.push(self.calcFloat(self.columns[index]), self.gutter, self.padding);
  }
  return floats;
}

// calculates "how much width" should be subtracted from the column
subtGutter = function (gutter) {
  var length = gutter.length
    , subtractArray = this.subtractArray
    , subtractValue = 0;

  subtractArray = subtractArray[length - 1];
  subtractArray.forEach(function (value) {
    subtractValue = subtractValue + gutter[value];
  });

  return subtractValue;
}

// prototyping
grid.prototype = {
  calcColumn: calcColumn,
  calcFloat: calcFloat, 
  calcGutter: subtGutter,
  calcPadding: subtGutter,
  getColumns: getColumns,
  getFloats: getFloats
}