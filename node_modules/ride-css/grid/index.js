// Ride css. Released under MIT licence.
// https://github.com/OctoD/ride-css/
var calcColumn
  , calcFloat
  , getColumns
  , getFloats
  , subtGutter;

// grid constructor
function GridWidth (width, columns, gutter, padding) {
  this.columns = columns;
  this.gutter = gutter;
  this.padding = padding;
  this.minColumn = width/columns;
  this.subtractArray = [[0, 0], [1, 1], [1, 1], [1, 3]]
  this.width = width;
}

// calculates the column
calcColumn = function (column) {
  return (this.minColumn * column) - this.calcGutter() - this.calcPadding();
}

// calculates the float
calcFloat = function (column) {
  var _gutter = this.calcGutter()
    , _width = this.calcColumn(column)

  return _width + (_gutter /2);
}

// calculates a list of columns
getColumns = function () {
  var cols = []
    , index = 0
    , self = this
    , subtracted = self.calcGutter() + self.calcPadding();

  while (index < self.columns - 1) {
    cols.push(self.calcColumn(index + 1));
    index++;
  }
  cols.push(self.width - subtracted);
  return cols;
}

// calculates a list of columns
getFloats = function () {
  var floats = []
    , index = 1
    , self = this;

  while (index < self.columns) {
    floats.push(self.calcFloat(index, self.gutter, self.padding));
    index++;
  }
  return floats;
}

// calculates "how much width" should be subtracted from the column
subtGutter = function (gutter) {
  var length = gutter.length
    , subtractArray = this.subtractArray
    , subtractValue = 0;

  subtractArray = subtractArray[length - 1];
  subtractArray.forEach(function (value) {
    subtractValue = subtractValue + parseFloat(gutter[value]);
  });
  return subtractValue;
}

// prototyping
GridWidth.prototype = {
  calcColumn: calcColumn,
  calcFloat: calcFloat, 
  calcGutter: function () {
    return subtGutter.call(this, this.gutter);
  },
  calcPadding: function () {
    return subtGutter.call(this, this.padding);
  },
  getColumns: getColumns,
  getFloats: getFloats
}

module.exports = GridWidth;