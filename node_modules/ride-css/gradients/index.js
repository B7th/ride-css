var GRADIENT_REGEXP = /\{\{[a-zA-Z]\}\}/g;

var applyVendorPattern
  , hasPrefix
  , mergeStops
  , vendorPatterns;


function Gradient (stops) {
  var self = this;

  stops.forEach(function (stop, stopPosition) {
    self[stopPosition] = stop;
  });
}

function GradientLinear (stops, direction) {
  this.gradient = new Gradient(stops);
  this.direction = direction;
}

function GradientRadial (stops) {
  this.gradient = new Gradient(stops);
}

applyVendorPattern = function (object) {
  return Object.keys(vendorPatterns).map(function (pattern, vendor) {
    vendorPatterns[vendor] = pattern.replace(GRADIENT_REGEXP, function (found) {
      return object[found].replace(/\{|\}/g, '');
    });
  });
}

vendorPatterns = {
  '-moz-'   : ['{{type}}-gradient({{direction}} {{stops}})'],
  '-webkit-': ['{{type}}-gradient({{direction}} {{stops}})'],
  '-o-'     : ['{{type}}-gradient({{direction}} {{stops}})'],
  '-ms-'    : ['{{type}}-gradient({{direction}} {{stops}}', 'progid:DXImageTransform.Microsoft.gradient(startColorstr="{{stops}}", endColorstr="{{stops}}", GradientType={MStype}'],
  ''        : ['{{type}}-gradient({{direction}} {{stops}})'],
}

Gradient.prototype = {
  applyVendorPattern: applyVendorPattern,
  mergeStops: mergeStops
}

module.exports.Linear = GradientLinear;
module.exports.Radial = GradientRadial;