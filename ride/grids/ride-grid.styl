// Ride css. Released under MIT licence.
// https://github.com/OctoD/ride-css/
// ride column grid
// options passed as an [object Object]
ride-grid(options = {})
  // setting up defaults
  class = options.gridClass || '.ride-grid'
  column = options.columnClass || '.cl'
  columns = options.columns || 12
  columnScope = options.columnScope || ''
  float = options.floatClass || '.float'
  floaterScope = options.floatScope || 'body'
  gridGutter = options.gridGutter || 0
  gridGutterType = options.gridGutterType || 'padding'
  gutter = options.gutter || 0 2
  gutterType = options.gutterType || 'margin'
  padding = options.padding || false
  push = options.pushClass || '.push'
  row = options.rowClass || '.row'
  rowGutter = options.rowGutter || 0
  rowGutterType = options.rowGutterType || 'margin'
  width = options.width || 100%

  gridUnit = unit(width)

  {class}
    ride-column(width, gridGutter, 1, 1)

  for columnNumber in 1...(columns+1)
    {columnScope} {column}{columnNumber}
      if !padding
        ride-column(width, gutter, columns, columnNumber, false)
      if padding
        ride-column(width, gutter, columns, columnNumber, 'both false')

  for columnNumber in 1...columns
    {floaterScope} {float}{columnNumber}
      ride-float(width, gutter, columns, columnNumber, gutterType, false)

  for columnNumber in 1...columns
    {floaterScope} {push}{columnNumber}
      ride-float(width, gutter, columns, columnNumber, gutterType, false, right)

  {columnScope} {unquote(replace('[class*="%s"]', '%s', replace(column, '.', '')))},
  {columnScope} {unquote(replace('[class*="%s"]', '%s', replace(float, '.', '')))}
    float left

  {columnScope} {unquote(replace('[class*="%s"]', '%s', replace(column, '.', '')))}
    {gutterType} setUnit(gutter, gridUnit)
    if padding
      padding setUnit(gutter, gridUnit)

  {column}{columns}
    float none

  .outgrid
    if rowGutter not 0
      {rowGutterType} setUnit((rowGutter*-1), gridUnit)

  {row},
  {class}
    clearfix()
  {row}
    if rowGutter not 0
      {rowGutterType} setUnit(rowGutter, gridUnit)

// twelve columns grid
ride-grid-12(gutter = 0 2, gridGutter = 0 2, gridWidth = 100%, padding = false, gutterType = 'margin')
  options = {}
  options.gridClass = '.ride-grid-12'
  options.gutter = gutter
  options.gutterType = gutterType
  options.gridGutter = gridGutter
  options.width = gridWidth
  options.padding = padding
  ride-grid(options)

// six columns grid (ideal for mobile use)
ride-grid-12-small(gutter = 0 2, gridGutter = 0 2, gridWidth = 100%, padding = false, gutterType = 'margin')
  options = {}
  options.columnClass = '.sm-cl'
  options.floatClass = '.sm-float'
  options.pushClass = '.sm-push'
  options.columns = 6
  options.columnScope = 'body'
  options.floatScope = 'html body'
  options.gridClass = '.ride-grid-12'
  options.gutter = gutter
  options.gutterType = gutterType
  options.gridGutter = gridGutter
  options.width = gridWidth
  options.padding = padding
  ride-grid(options)

// four columns grid (ideal for mobile use)
ride-grid-12-smallest(gutter = 0 2, gridGutter = 0 2, gridWidth = 100%, padding = false, gutterType = 'margin')
  options = {}
  options.columnClass = '.smt-cl'
  options.floatClass = '.smt-float'
  options.pushClass = '.smt-push'
  options.columns = 4
  options.columnScope = 'body'
  options.floatScope = 'html body'
  options.gridClass = '.ride-grid-12'
  options.gutter = gutter
  options.gutterType = gutterType
  options.gridGutter = gridGutter
  options.width = gridWidth
  options.padding = padding
  ride-grid(options)

// twelve columns grid reset. Ideal for smaller devices
ride-grid-12-reset(gutter = 2, gridWidth = 100%, gutterType = 'both')
  .ride-grid-12
    margin 0 2%
    width 96%
    [class*="cl"]
    [class*="cl"][class*="float"]
    [class*="cl"][class*="push"]
      ride-column(100%, gutter, 1, 1, gutterType)

// two columns grid. Ideal for "app style" designs
ride-two-columns(class = '.site-nav', contentClass = '.site-content', hideNav = '.hide-nav', contentWidth = 61.8, navPosition = left, gridGutter = 0 2, width = 100%, options = {})
  // the nav will have this width! 
  smallColumn = parseFloat(100 - contentWidth)
  // nav class
  {class}
    a
      display block
    ride-column(width: width, columnCount: 100, currentColumn: smallColumn, gutterType: 'padding', gutter: gridGutter)
    {navPosition} 0
    height 100%
    position fixed
    top 0
    {hideNav} &
      {navPosition} -(smallColumn)%
  // content class
  {contentClass}
    ride-column(width: width, columnCount: 100, currentColumn: contentWidth, gutterType: 'padding', gutter: gridGutter)
    if navPosition == left
      ride-float(width: width, columnCount: 100, currentColumn: smallColumn, floatDirection: navPosition, gutter: gridGutter, gutterType: 'both')
    {hideNav} &
      float none
      unless options.toFull
        margin-{navPosition} unit(smallColumn/2, '%')
      if options.toFull
        margin 0
        ride-column(width: width, columnCount: 100, currentColumn: width, gutterType: 'padding', gutter: gridGutter)


ride-two-columns-reset(class='.site-nav', contentClass='.site-content')
  {class}, {contentClass}
    height auto
    margin 0
    padding 0 2%
    width 96%
    a
      display inline-block

  {contentClass}
    {block}


ride-column-grid(class, columnCount, columnClass = '.cl')
  {class}
    column-count(columnCount)
    {block}
  {class} {columnClass}
    page-break-inside(avoid)
    margin 0
    float none
