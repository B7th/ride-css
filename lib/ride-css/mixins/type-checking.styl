// copyright 2015 @ Paolo Roth <iamoctod@gmail.com>
// MIT licenced

// checks quickly if a passed variable is of the correct type
// @param {Any}     $item   is the variable you are checking
// @param {String}  $check  is the type you are expecting
// @returns {Void}
ensure($item, $check)
  if type-of($item) != $check
    warn('expected a unit, but got a '+ typeof($item))
    return false
  else
    return true

// checks quickly if a passed variable is of the correct type
// throws an error if it's not compliant
// @param {Any}     $item   is the variable you are checking
// @param {String}  $check  is the type you are expecting
// @returns {Void}
ensure-strict($item, $check)
  if type-of($item) != $check
    error('expected a unit, but got a '+ typeof($item))
// unit typechecking functions
// they're should spare you some seconds and some code
// I hope.

// this function checks if the passed variable is a unit and it's unit is ch
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-ch($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'ch'
  return $check

// this function checks if the passed variable is a unit and it's unit is deg
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-degrees($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'deg'
  return $check

// aliasing is-milliseconds function
are-deg = areDegrees = are-degrees = is-deg = isDegrees = is-degrees

// this function checks if the passed variable is a unit and it's unit is em
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-em($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'em'
  return $check

// this function checks if the passed variable is a unit and it's unit is ex
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-ex($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'ex'
  return $check

// this function checks if the passed variable is a unit and it's unit is milli
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-milliseconds($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'ms'
  return $check

// aliasing is-milliseconds function
are-ms = areMilliseconds = are-milliseconds = is-ms = isMilliseconds = is-milliseconds

// this function checks if the passed variable is a unit and it's unit is a percentage
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-percentage($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is '%'
  return $check

// aliasing is-percentage function
is-perc = isPercentage = is-percentage

// this function checks if the passed variable is a unit and it's unit is pixel
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-pixel($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'px'
  return $check

// aliasing is-pixel function
is-px = isPixel = is-pixel

// this function checks if the passed variable is a unit and it's unit is point
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-point($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'pt'
  return $check

// aliasing is-pixel function
is-pt = isPoint = is-point

// this function checks if the passed variable is a unit and it's unit is rem
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-rem($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'rem'
  return $check

// this function checks if the passed variable is a unit and it's unit is seconds
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-seconds($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 's'
  return $check

// aliasing is-seconds function
are-s = areSeconds = are-seconds = is-s = isSeconds = is-seconds

// this function checks if the passed variable is a unit and it's unit is vmax
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-vmax($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'vmax'
  return $check

// this function checks if the passed variable is a unit and it's unit is vmin
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-vmin($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'vmin'
  return $check

// this function checks if the passed variable is a unit and it's unit is vh
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-vh($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'vh'
  return $check

// this function checks if the passed variable is a unit and it's unit is vw
// @param {unit} $unit the passed variable
// @returns {Boolean} return true if the passed variable is correct
is-vw($unit)
  ensure($unit, 'unit')
  $check = unit($unit) is 'vw'
  return $check

// strict type checking

// this function checks if the passed variable is a boolean
// @param   {any}     $variable   the variable you wish to check
// @return  {Boolean}             returns true if it's type is correct.
is-boolean($variable)
  return ensure($variable, 'boolean')

// aliasing is-boolean
is-bool = is-boolean

// this function checks if the passed variable is a ident
// @param   {any}     $variable   the variable you wish to check
// @return  {Boolean}             returns true if it's type is correct.
is-ident($variable)
  return ensure($variable, 'ident')

// this function checks if the passed variable is a function
// @param   {any}     $variable   the variable you wish to check
// @return  {Boolean}             returns true if it's type is correct.
is-function($variable)
  return ensure($variable, 'function')

// this function checks if the passed variable is a number
// @param   {any}     $variable   the variable you wish to check
// @return  {Boolean}             returns true if it's type is correct.
is-number($variable)
  ensure($variable, 'unit')
  return unit($variable) is ''

// this function checks if the passed variable is a string
// @param   {any}     $variable   the variable you wish to check
// @return  {Boolean}             returns true if it's type is correct.
is-string($variable)
  return ensure($variable, 'string')
